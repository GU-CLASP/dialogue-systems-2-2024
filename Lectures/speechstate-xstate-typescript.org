#+TITLE: TypeScript, SpeechState, XState

* Introduction
[video goes here]

** COMMENT script
- TypeScript will help you with more complex code
- You need to learn the basics from the TotalTypeScript book
- In this course you will have 3 modules: Information-state update, LLMs for dialogue systems and Multimodality
- You will be using state charts for all of them. 
- And you will be using TypeScript, because it will give you more control.

* TypeScript

** Why TypeScript
- Check if your code is correct before runnning it.
- Power up your IDE (i.e. VSCode) with autocomplete and type-checking.
- Have better control over your state machine.

** Basic example
~"1"+1~
(video goes here)

** Recap: defining functions with ~const~.
(video goes here)

** Now: [[https://www.totaltypescript.com/books/total-typescript-essentials/][Total TypeScript free book]] (Chapters 1-6)
** Prettier
*Prettier* will make your code look much nicer and also help avoiding
errors, i.e. with balancing brackets. Enable it every time you save
your files. You can follow [[https://www.digitalocean.com/community/tutorials/how-to-format-code-with-prettier-in-visual-studio-code][this guide]] to enable it in VSCode.

* Implementing Dialogue systems 2 starter (now in TypeScript)
Our goal here is to get a working application based on from [[https://github.com/GU-CLASP/dialogue-systems-1-2024/tree/main/Code][Dialogue
Systems 1 starter code]], which was implemented in JavaScript. We are
going to turn it into TypeScript files and fix the errors.

** Preparation

1. We will start with by adding these files to en empty folder, defined in [[https://stately.ai/docs/templates][XState template]].

  ~package.json~:
 #+begin_src json
   {
     "name": "dm-demo",
     "private": true,
     "version": "0.0.0",
     "type": "module",
     "scripts": {
       "dev": "vite",
       "build": "tsc && vite build",
       "preview": "vite preview"
     },
     "devDependencies": {
       "typescript": "^5.5.4",
       "vite": "^5.3.5"
     },
     "dependencies": {
       "@statelyai/inspect": "^0.4.0",
       "speechstate": "^2.5.0",
       "xstate": "^5.18.0"
     },
     "packageManager": "yarn@3.6.4+sha256.7f7d51b38db0d94adf25c512e3f3d3b47d23c97922eecc540f7440f116bdb99a"
   }
 #+end_src
  
  ~tsconfig.json~:
  #+begin_src json
  {
    "compilerOptions": {
      "target": "ESNext",
      "useDefineForClassFields": true,
      "module": "ESNext",
      "lib": ["ESNext", "DOM"],
      "moduleResolution": "Node",
      "strict": true,
      "resolveJsonModule": true,
      "isolatedModules": true,
      "esModuleInterop": true,
      "noEmit": true,
      "noUnusedLocals": true,
      "noUnusedParameters": true,
      "noImplicitReturns": true,
      "skipLibCheck": true
    },
    "include": ["src"]
  }
  #+end_src
  
    ~index.ts~:
  #+begin_src html
  <!doctype html>
  <html lang="en">
    <head>
      <meta charset="UTF-8" />
      <link rel="icon" type="image/svg+xml" href="/vite.svg" />
      <meta name="viewport" content="width=device-width, initial-scale=1.0" />
      <title>Vite + TS</title>
    </head>
    <body>
      <div id="app"></div>
      <script type="module" src="/src/main.ts"></script>
    </body>
  </html>
  #+end_src

2. You can now install the dependencies:
   - run ~echo "nodeLinker: node-modules" > .yarnrc.yml~ to use
     node-modules directory for storing dependencies (caused by some
     old dependency of SpeechState)

   - run ~yarn install~ to install the dependencies

3. Now create ~src~ folder and move ~dm.js~, ~main.js~, ~style.css~ from
   [[https://github.com/GU-CLASP/dialogue-systems-1-2024/tree/main/Code][Dialogue Systems 1 starter code]] there. Rename both ~.js~ files to
   ~.ts~.

4. Now let's look at the errors.


** Fixing the TypeScript errors
1. ~./src/main.ts~
   [video goes here]
2. ~./src/dm.ts~
   - adding azure key
     [video goes here]
   - typing global constants and functions
     [video goes here]
   - typing context and events
     [video goes here]
   - Fixing ~Uncaught TypeError: snapshot.value.AsrTtsManager~ aka getting SpeechState meta values
     [video goes here]
3. Now everything works!
     

* SpeechState, XState (now with TypeScript)
[[https://stately.ai/docs/machines#machines-and-typescript][XState docs]]

** Interaction with SpeechState
[[https://github.com/vladmaraev/speechstate?tab=readme-ov-file#sequence-diagrams][
Sequence diagram]]

** States, events and transitions


** Actions
It is nice to type actions as well, and define them in ~setup()~:
[[https://stately.ai/docs/actions#actions-and-typescript][Actions & TypeScript]].

[video goes here]



** Assign action
** Invoke (next time)
